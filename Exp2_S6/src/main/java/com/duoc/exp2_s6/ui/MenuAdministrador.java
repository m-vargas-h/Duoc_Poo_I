package com.duoc.exp2_s6.ui;

import com.duoc.exp2_s6.servicio.ComicCollectorService;
import com.duoc.exp2_s6.modelo.base.Producto;
import com.duoc.exp2_s6.modelo.enums.EstadoProducto;
import com.duoc.exp2_s6.modelo.enums.TipoTCG;
import com.duoc.exp2_s6.modelo.productos.*;
import com.duoc.exp2_s6.excepciones.*;

import java.util.Scanner;

public class MenuAdministrador {
    // Credenciales de administrador 
    private static final String ADMIN_USER = "admin";
    private static final String ADMIN_PASS = "password"; // La clave mas segura del mundo mundial

    private final Scanner scanner;
    private final ComicCollectorService servicio;

    public MenuAdministrador(Scanner scanner, ComicCollectorService servicio) {
        this.scanner = scanner;
        this.servicio = servicio;
    }

    // Inicia el men√∫ de administrador, solicitando credenciales.
    // Si las credenciales son correctas, muestra el men√∫ de administrador.
    public void login() {
        System.out.println("\n=== LOGIN ADMINISTRADOR ===");
        System.out.print("Usuario: ");
        String user = scanner.nextLine().trim();
        System.out.print("Contrase√±a: ");
        String pass = scanner.nextLine().trim();

        if (!ADMIN_USER.equals(user) || !ADMIN_PASS.equals(pass)) {
            System.out.println("Credenciales incorrectas. Volviendo al men√∫ principal.");
            return;
        }

        System.out.println("Bienvenido, administrador.\n");
        mostrar();
    }

    public void mostrar() {
        int opcion;
        do {
            imprimirMenu();
            opcion = leerOpcion();
            switch (opcion) {
                case 1:
                    agregarProducto();
                    break;

                case 2:
                    eliminarProducto();
                    break;

                case 3:
                    listarUsuarios();
                    break;

                case 4:
                    modificarStock();
                    break;

                case 5:
                    cambiarEstadoProducto();
                    break;

                case 6:
                    verResumenVentasDetallado();
                    break;

                case 7:
                    System.out.println("Volviendo al men√∫ principal...");
                    break;

                default:
                    System.out.println("Opci√≥n no v√°lida.");
                    break;
            }

        } while (opcion != 7);
    }

    private void imprimirMenu() {
        System.out.println("""
        ========== MEN√ö ADMINISTRADOR ==========
        1. Agregar producto al inventario
        2. Eliminar producto
        3. Listar usuarios registrados
        4. Modificar stock de producto
        5. Cambiar estado de producto
        6. Ver resumen de ventas
        7. Salir al men√∫ principal
        =========================================
        """);
    }

    private int leerOpcion() {
        try {
            System.out.print("Seleccione una opci√≥n: ");
            return Integer.parseInt(scanner.nextLine());
        } catch (NumberFormatException e) {
            return -1;
        }
    }

    private void agregarProducto() {
        System.out.println("""
            Elige tipo de producto:
            1. Comic
            2. NovelaGr√°fica
            3. Coleccionable
            4. Juego de Mesa
            5. TCG
            6. Volver
            """);
        int tipo = leerOpcion();
        if (tipo == 6) return;

        // Creamos una plantilla para extraer el c√≥digo de tipo
        Producto plantilla;
        switch (tipo) {
            case 1 -> plantilla = new Comic("", "", 0, 0, "");
            case 2 -> plantilla = new NovelaGrafica("", "", 0.0, 0, "", 0);
            case 3 -> plantilla = new Coleccionable("", "", 0, 0, "", "");
            case 4 -> plantilla = new JuegoMesa("", "", 0.0, 0, "", 0, 0);
            case 5 -> plantilla = new TCG("", "", 0, 0, "", 0, TipoTCG.OTRO);
            default -> {
                System.out.println("Opci√≥n inv√°lida.");
                return;
            }
        }

        // Generar ID: XXX + YYY + ZZZ
        String id = servicio.generarIdProducto(plantilla);
        System.out.println("ID generado: " + id);

        // Leer atributos comunes
        System.out.print("T√≠tulo: ");
        String titulo = scanner.nextLine().trim();
        System.out.print("Precio: ");
        double precio = Double.parseDouble(scanner.nextLine().trim());
        System.out.print("Stock inicial: ");
        int stock = Integer.parseInt(scanner.nextLine().trim());

        Producto real = null;
        try {
            switch (tipo) {
                case 1 -> {
                    // Comic
                    System.out.print("Editorial: ");
                    String editorial = scanner.nextLine().trim();
                    System.out.print("Volumen (opcional): ");
                    String vol = scanner.nextLine().trim();
                    if (vol.isEmpty()) {
                        real = new Comic(id, titulo, precio, stock, editorial);
                    } else {
                        real = new Comic(id, titulo, precio, stock, editorial, Integer.parseInt(vol));
                    }
                }

                case 2 -> {
                    // NovelaGr√°fica
                    System.out.print("Autor: ");
                    String autor = scanner.nextLine().trim();

                    System.out.print("A√±o de publicaci√≥n: ");
                    int fechaPublicacion = Integer.parseInt(scanner.nextLine().trim());

                    real = new NovelaGrafica(
                        id,
                        titulo,
                        precio,
                        stock,
                        autor,
                        fechaPublicacion
                    );
                }

                case 3 -> {
                    // Coleccionable
                    System.out.print("Franquicia: ");
                    String franq = scanner.nextLine().trim();
                    System.out.print("Edici√≥n: ");
                    String ed = scanner.nextLine().trim();
                    real = new Coleccionable(id, titulo, precio, stock, franq, ed);
                }

                case 4 -> {
                    // Juego de Mesa
                    System.out.print("Creador: ");
                    String creador = scanner.nextLine().trim();

                    System.out.print("Jugadores m√≠nimos: ");
                    int min = Integer.parseInt(scanner.nextLine().trim());

                    System.out.print("Jugadores m√°ximos (opcional): ");
                    String max = scanner.nextLine().trim();

                    System.out.print("Edad recomendada: ");
                    int edad = Integer.parseInt(scanner.nextLine().trim());

                    if (max.isEmpty()) {
                        // Llama al constructor sin jugadores m√°ximos (7 params)
                        real = new JuegoMesa(
                            id,
                            titulo,
                            precio,
                            stock,
                            creador,
                            min,
                            edad           // este es el s√©ptimo par√°metro
                        );
                    } else {
                        // Llama al constructor con jugadores m√°ximos (8 params)
                        int maxJug = Integer.parseInt(max);
                        real = new JuegoMesa(
                            id,
                            titulo,
                            precio,
                            stock,
                            creador,
                            min,
                            maxJug,       // s√©ptimo par√°metro
                            edad          // octavo par√°metro
                        );
                    }
                }

                case 5 -> {
                    // TCG
                    System.out.print("Nombre de Juego: ");
                    String nombreJuego = scanner.nextLine().trim();
                    System.out.print("Edad recomendada: ");
                    int edadRec = Integer.parseInt(scanner.nextLine().trim());
                    System.out.print("Tipo (BOOSTER, DECK, DISPLAY, PROMO, LATA, OTRO): ");
                    TipoTCG tipoTcg = TipoTCG.valueOf(scanner.nextLine().trim().toUpperCase());
                    real = new TCG(id, titulo, precio, stock, nombreJuego, edadRec, tipoTcg);
                }
            }

            // Agregar al inventario
            servicio.agregarProducto(real);
            System.out.println("Producto agregado con ID: " + id);

        } catch (Exception e) {
            System.err.println("Error al crear producto: " + e.getMessage());
        }
    }   
    
    private void eliminarProducto() {
        System.out.print("ID de producto a eliminar: ");
        String id = scanner.nextLine().trim();
        try {
            servicio.eliminarProducto(id);
            System.out.println("Producto eliminado.");
        } catch (EntidadNoEncontradaException e) {
            System.err.println("Error: " + e.getMessage());
        }
    }

    private void listarUsuarios() {
        System.out.println("üë• Usuarios registrados:");
        servicio.listarUsuarios()
                .forEach(u -> System.out.println("‚Ä¢ " + u));
    }

    private void modificarStock() {
        System.out.print("ID de producto: ");
        String id = scanner.nextLine().trim();
        System.out.print("Cantidad a ajustar (+ a√±ade, - quita): ");
        int delta;
        try {
            delta = Integer.parseInt(scanner.nextLine());
            servicio.ajustarStock(id, delta);
            System.out.println("Stock modificado.");
        } catch (NumberFormatException e) {
            System.err.println("Cantidad inv√°lida.");
        } catch (EntidadNoEncontradaException | IllegalArgumentException e) {
            System.err.println("Error: " + e.getMessage());
        }
    }

    private void cambiarEstadoProducto() {
        System.out.print("ID de producto: ");
        String id = scanner.nextLine().trim();
        System.out.print("Nuevo estado (DISPONIBLE, AGOTADO, OCULTO): ");
        String raw = scanner.nextLine().trim().toUpperCase();
        try {
            EstadoProducto estado = EstadoProducto.valueOf(raw);
            servicio.cambiarEstadoProducto(id, estado);
            System.out.println("Estado actualizado.");
        } catch (IllegalArgumentException e) {
            System.err.println("Estado inv√°lido.");
        } catch (EntidadNoEncontradaException e) {
            System.err.println("Error: " + e.getMessage());
        }
    }

    // en MenuAdministrador.java
    private void verResumenVentasDetallado() {
        System.out.println("Resumen detallado de ventas:");
        servicio.generarResumenVentasDetallado()
                .forEach(rv -> {
                    Producto p = rv.getProducto();
                    System.out.printf("‚Ä¢ %s | %s ‚Üí %d unidades ‚Üí $%.2f total%n",
                        p.getId(),
                        p.getTitulo(),
                        rv.getCantidadTotal(),
                        rv.getIngresoTotal()
                    );
                });
    }
}